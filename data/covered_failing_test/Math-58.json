[
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "start_line": 51,
        "end_line": 54,
        "name": "CurveFitter",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "start_line": 66,
        "end_line": 68,
        "name": "addObservedPoint",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "start_line": 79,
        "end_line": 81,
        "name": "addObservedPoint",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "start_line": 99,
        "end_line": 101,
        "name": "getObservations",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "start_line": 125,
        "end_line": 127,
        "name": "fit",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "start_line": 147,
        "end_line": 166,
        "name": "fit",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "start_line": 67,
        "end_line": 69,
        "name": "GaussianFitter",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "start_line": 119,
        "end_line": 122,
        "name": "fit",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "start_line": 61,
        "end_line": 63,
        "name": "BaseAbstractVectorialOptimizer",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "start_line": 67,
        "end_line": 69,
        "name": "BaseAbstractVectorialOptimizer",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "start_line": 87,
        "end_line": 89,
        "name": "getConvergenceChecker",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "start_line": 101,
        "end_line": 108,
        "name": "computeObjectiveValue",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "start_line": 111,
        "end_line": 142,
        "name": "optimize",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "start_line": 164,
        "end_line": 166,
        "name": "getTargetRef",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "start_line": 170,
        "end_line": 172,
        "name": "getWeightRef",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "start_line": 78,
        "end_line": 78,
        "name": "AbstractLeastSquaresOptimizer",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "start_line": 101,
        "end_line": 118,
        "name": "updateJacobian",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "start_line": 127,
        "end_line": 145,
        "name": "updateResidualsAndCost",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "start_line": 231,
        "end_line": 254,
        "name": "optimize",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "start_line": 151,
        "end_line": 153,
        "name": "LevenbergMarquardtOptimizer",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "start_line": 204,
        "end_line": 214,
        "name": "LevenbergMarquardtOptimizer",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "start_line": 217,
        "end_line": 452,
        "name": "doOptimize",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "start_line": 476,
        "end_line": 623,
        "name": "determineLMParameter",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "start_line": 645,
        "end_line": 744,
        "name": "determineLMDirection",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "start_line": 768,
        "end_line": 833,
        "name": "qrDecomposition",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "start_line": 840,
        "end_line": 852,
        "name": "qTy",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java",
        "start_line": 52,
        "end_line": 55,
        "name": "AbstractConvergenceChecker",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java",
        "start_line": 72,
        "end_line": 74,
        "name": "getRelativeThreshold",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java",
        "start_line": 79,
        "end_line": 81,
        "name": "getAbsoluteThreshold",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java",
        "start_line": 39,
        "end_line": 39,
        "name": "SimpleVectorialValueChecker",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java",
        "start_line": 72,
        "end_line": 89,
        "name": "converged",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/Incrementor.java",
        "start_line": 43,
        "end_line": 45,
        "name": "setMaximalCount",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/Incrementor.java",
        "start_line": 83,
        "end_line": 87,
        "name": "incrementCount",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/Incrementor.java",
        "start_line": 92,
        "end_line": 94,
        "name": "resetCount",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "start_line": 47,
        "end_line": 51,
        "name": "WeightedObservedPoint",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "start_line": 56,
        "end_line": 58,
        "name": "getWeight",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "start_line": 63,
        "end_line": 65,
        "name": "getX",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "start_line": 70,
        "end_line": 72,
        "name": "getY",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "start_line": 140,
        "end_line": 148,
        "name": "ParameterGuesser",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "start_line": 155,
        "end_line": 160,
        "name": "guess",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "start_line": 168,
        "end_line": 188,
        "name": "basicGuess",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "start_line": 196,
        "end_line": 204,
        "name": "findMaxY",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "start_line": 220,
        "end_line": 238,
        "name": "interpolateXAtY",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "start_line": 255,
        "end_line": 278,
        "name": "getInterpolationPointsForY",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "start_line": 290,
        "end_line": 293,
        "name": "isBetween",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "start_line": 301,
        "end_line": 334,
        "name": "createWeightedObservedPointComparator",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java",
        "start_line": 61,
        "end_line": 69,
        "name": "MathRuntimeException",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java",
        "start_line": 101,
        "end_line": 103,
        "name": "getMessage",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java",
        "start_line": 112,
        "end_line": 115,
        "name": "getLocalizedMessage",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java",
        "start_line": 41,
        "end_line": 45,
        "name": "MathIllegalArgumentException",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java",
        "start_line": 46,
        "end_line": 52,
        "name": "MathIllegalNumberException",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/exception/OutOfRangeException.java",
        "start_line": 43,
        "end_line": 47,
        "name": "OutOfRangeException",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/exception/OutOfRangeException.java",
        "start_line": 58,
        "end_line": 66,
        "name": "OutOfRangeException",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java",
        "start_line": 340,
        "end_line": 342,
        "name": "LocalizedFormats",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java",
        "start_line": 350,
        "end_line": 367,
        "name": "getLocalizedString",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/exception/util/ArgUtils.java",
        "start_line": 41,
        "end_line": 55,
        "name": "flatten",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java",
        "start_line": 126,
        "end_line": 133,
        "name": "value",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java",
        "start_line": 149,
        "end_line": 162,
        "name": "gradient",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java",
        "start_line": 175,
        "end_line": 185,
        "name": "validateParameters",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "start_line": 177,
        "end_line": 179,
        "name": "TheoreticalValuesFunction",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "start_line": 182,
        "end_line": 195,
        "name": "jacobian",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "start_line": 198,
        "end_line": 207,
        "name": "value",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 276,
        "end_line": 278,
        "name": "sqrt",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 696,
        "end_line": 698,
        "name": "exp",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 707,
        "end_line": 822,
        "name": "exp",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 986,
        "end_line": 1013,
        "name": "slowexp",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 1020,
        "end_line": 1030,
        "name": "split",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 1036,
        "end_line": 1049,
        "name": "resplit",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 1056,
        "end_line": 1062,
        "name": "splitMult",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 1069,
        "end_line": 1074,
        "name": "splitAdd",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 1094,
        "end_line": 1122,
        "name": "splitReciprocal",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 1129,
        "end_line": 1176,
        "name": "quadMult",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 1183,
        "end_line": 1221,
        "name": "expint",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 1715,
        "end_line": 1757,
        "name": "slowLog",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 1765,
        "end_line": 1799,
        "name": "slowSin",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 1807,
        "end_line": 1842,
        "name": "slowCos",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 1846,
        "end_line": 1938,
        "name": "buildSinCosTables",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 3379,
        "end_line": 3381,
        "name": "abs",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 3783,
        "end_line": 3785,
        "name": "min",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 3826,
        "end_line": 3844,
        "name": "min",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "start_line": 3894,
        "end_line": 3912,
        "name": "max",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java",
        "start_line": 194,
        "end_line": 198,
        "name": "value",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java",
        "start_line": 46,
        "end_line": 49,
        "name": "VectorialPointValuePair",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java",
        "start_line": 96,
        "end_line": 98,
        "name": "getValueRef",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java",
        "start_line": 49,
        "end_line": 53,
        "name": "NumberIsTooSmallException",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java",
        "start_line": 63,
        "end_line": 75,
        "name": "NumberIsTooSmallException",
        "failing_tests_count": 1
    },
    {
        "file": "src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java",
        "start_line": 37,
        "end_line": 39,
        "name": "NotStrictlyPositiveException",
        "failing_tests_count": 1
    }
]